{
  "version": 3,
  "sources": ["../BotConnection.ts"],
  "sourcesContent": ["import {Socket} from \"socket.io\";\nimport * as SystemBot from \"./SystemBot\";\nimport { io } from \"./index\";\nimport { v4 as uuid } from 'uuid';\nimport { messageCache, filter } from \"./Connection\";\nimport { getBotByToken, getBot } from \"./BotRegistry\";\n\ninterface BotAuth {\n  token: string;\n  profileImage: string;\n}\n\nfunction isMessageValid(message: string) {\n  let valid = true;\n\n  let formatted = message.replaceAll(\" \" , \"\").toLowerCase();\n  if (formatted.length < 1 || message.length > 200) {\n    valid = false;\n  }\n  \n  return valid;\n}\n\nexport default class BotConnection {\n  socket: Socket;\n  constructor(socket: Socket) {\n    (async () => {\n    let muted = false;\n    let banned = false;\n\n    let lastMessage = 0;\n\n    this.socket = socket;\n\n    function mute(set: boolean) {\n      muted = set;\n      socket.emit(\"data\", {\n        loadType: \"mute\",\n        load: {\n          muted: muted\n        }\n      });\n    }\n    function error(message: string) {\n      socket.emit(\"data\", {\n        loadType: \"error\",\n        load: {\n          message\n        }\n      });\n    }\n\n    let auth: BotAuth;\n    \n    try {\n      auth = JSON.parse(String(this.socket.handshake.query.auth));\n    } catch(e) {\n      socket.disconnect();\n      return\n    }\n\n    if(!auth.token) {\n      error(\"No token given!\")\n      return;\n    }\n\n    const bot = await getBotByToken(auth.token);\n    if(!bot) {\n      error(\"No bot found for token: \" + auth.token);\n      return;\n    }\n      \n    if(!auth.profileImage)\n      auth.profileImage = \"https://ripl-filestorage.szymonpl188.repl.co/default\";\n    \n    if(banned) {\n      this.socket.emit(\"data\", {\n        loadType: \"ban\",\n        load: {}\n      });\n      return\n    }\n    \n    this.socket.on(\"message\", async (data) => {\n      if(muted || banned) return this.socket.emit(\"data\", {\n        loadType: \"mute\",\n        load: {\n          muted: muted\n        }\n      });\n      if(lastMessage + 2000 > Date.now()) return error(\"You can send a message once 2 seconds\");\n      if(typeof data !== \"string\") return;\n      if(!isMessageValid(data)) return error(\"Message is invalid\");\n      const messageBot = await getBotByToken(auth.token);\n      console.log(messageBot)\n      const message: SystemBot.MessageData = {\n        sender: messageBot.name,\n        senderImage: auth?.profileImage,\n        content: filter.clean(data),\n        timestamp: Date.now(),\n        bot: true\n      }\n      lastMessage = Date.now();\n      this.socket.broadcast.emit(\"message\", message);\n      messageCache.push(message);\n    });\n    })();\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAIA,wBAAqC;AACrC,yBAAsC;AAOtC,wBAAwB,SAAiB;AACvC,MAAI,QAAQ;AAEZ,MAAI,YAAY,QAAQ,WAAW,KAAM,IAAI;AAC7C,MAAI,UAAU,SAAS,KAAK,QAAQ,SAAS,KAAK;AAChD,YAAQ;AAAA;AAGV,SAAO;AAAA;AAGT,oBAAmC;AAAA,EACjC;AAAA,EACA,YAAY,QAAgB;AAC1B,IAAC,aAAY;AACb,UAAI,QAAQ;AACZ,UAAI,SAAS;AAEb,UAAI,cAAc;AAElB,WAAK,SAAS;AAEd,oBAAc,KAAc;AAC1B,gBAAQ;AACR,eAAO,KAAK,QAAQ;AAAA,UAClB,UAAU;AAAA,UACV,MAAM;AAAA,YACJ;AAAA;AAAA;AAAA;AAIN,qBAAe,SAAiB;AAC9B,eAAO,KAAK,QAAQ;AAAA,UAClB,UAAU;AAAA,UACV,MAAM;AAAA,YACJ;AAAA;AAAA;AAAA;AAKN,UAAI;AAEJ,UAAI;AACF,eAAO,KAAK,MAAM,OAAO,KAAK,OAAO,UAAU,MAAM;AAAA,eAC/C,GAAN;AACA,eAAO;AACP;AAAA;AAGF,UAAG,CAAC,KAAK,OAAO;AACd,cAAM;AACN;AAAA;AAGF,YAAM,MAAM,MAAM,sCAAc,KAAK;AACrC,UAAG,CAAC,KAAK;AACP,cAAM,6BAA6B,KAAK;AACxC;AAAA;AAGF,UAAG,CAAC,KAAK;AACP,aAAK,eAAe;AAEtB,UAAG,QAAQ;AACT,aAAK,OAAO,KAAK,QAAQ;AAAA,UACvB,UAAU;AAAA,UACV,MAAM;AAAA;AAER;AAAA;AAGF,WAAK,OAAO,GAAG,WAAW,OAAO,SAAS;AACxC,YAAG,SAAS;AAAQ,iBAAO,KAAK,OAAO,KAAK,QAAQ;AAAA,YAClD,UAAU;AAAA,YACV,MAAM;AAAA,cACJ;AAAA;AAAA;AAGJ,YAAG,cAAc,MAAO,KAAK;AAAO,iBAAO,MAAM;AACjD,YAAG,OAAO,SAAS;AAAU;AAC7B,YAAG,CAAC,eAAe;AAAO,iBAAO,MAAM;AACvC,cAAM,aAAa,MAAM,sCAAc,KAAK;AAC5C,gBAAQ,IAAI;AACZ,cAAM,UAAiC;AAAA,UACrC,QAAQ,WAAW;AAAA,UACnB,aAAa,6BAAM;AAAA,UACnB,SAAS,yBAAO,MAAM;AAAA,UACtB,WAAW,KAAK;AAAA,UAChB,KAAK;AAAA;AAEP,sBAAc,KAAK;AACnB,aAAK,OAAO,UAAU,KAAK,WAAW;AACtC,uCAAa,KAAK;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
