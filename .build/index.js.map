{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { Server, Socket } from \"socket.io\";\nimport Connection, { messageCache, setMessages } from \"./Connection\";\nimport BotConnection from \"./BotConnection\";\nimport Database from \"@replit/database\";\n\nexport const db = new Database();\n\nexport const io = new Server({\n  cors: {\n    origin: \"*\"\n  }\n});\n\nsetInterval(() => {\n  let data = JSON.stringify(messageCache);\n  db.set(\"messages\", data);\n}, 30000);\n\n(async () => {\n  let messages = await db.get(\"messages\");\n  if(messages) {\n    let parsed = JSON.parse(messages);\n    setMessages(parsed);\n  }\n})();\n\nlet activeBots: Record<string, BotConnection> = {}\n\nio.on(\"connection\", (socket: Socket) => {\n  let botConnection = false;\n  \n  const origin = socket.handshake.headers.origin;\n  if(!origin) {\n    botConnection = true;\n  } else {\n    if(!origin!.includes(process.env['ORIGIN']!)) {\n      botConnection = true;\n    }\n  }\n\n  if(botConnection) {\n    let ip: string = socket.handshake.headers.ip as string;\n    if(activeBots[ip]) {\n      socket.emit(\"data\", {\n        loadType: \"error\",\n        load: {\n          message: \"Bot already connected\"\n        }\n      })\n      return;  \n    }\n    \n    activeBots[ip] = new BotConnection(socket);\n\n    socket.on(\"disconnect\", () => {\n      delete activeBots[ip];\n    });\n    \n    return;\n  }\n  const connection = new Connection(socket);\n});\n\nio.listen(3000);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA+B;AAC/B,wBAAsD;AACtD,2BAA0B;AAC1B,sBAAqB;AAEd,MAAM,KAAK,IAAI;AAEf,MAAM,KAAK,IAAI,qBAAO;AAAA,EAC3B,MAAM;AAAA,IACJ,QAAQ;AAAA;AAAA;AAIZ,YAAY,MAAM;AAChB,MAAI,OAAO,KAAK,UAAU;AAC1B,KAAG,IAAI,YAAY;AAAA,GAClB;AAEH,AAAC,aAAY;AACX,MAAI,WAAW,MAAM,GAAG,IAAI;AAC5B,MAAG,UAAU;AACX,QAAI,SAAS,KAAK,MAAM;AACxB,uCAAY;AAAA;AAAA;AAIhB,IAAI,aAA4C;AAEhD,GAAG,GAAG,cAAc,CAAC,WAAmB;AACtC,MAAI,gBAAgB;AAEpB,QAAM,SAAS,OAAO,UAAU,QAAQ;AACxC,MAAG,CAAC,QAAQ;AACV,oBAAgB;AAAA,SACX;AACL,QAAG,CAAC,OAAQ,SAAS,QAAQ,IAAI,YAAa;AAC5C,sBAAgB;AAAA;AAAA;AAIpB,MAAG,eAAe;AAChB,QAAI,KAAa,OAAO,UAAU,QAAQ;AAC1C,QAAG,WAAW,KAAK;AACjB,aAAO,KAAK,QAAQ;AAAA,QAClB,UAAU;AAAA,QACV,MAAM;AAAA,UACJ,SAAS;AAAA;AAAA;AAGb;AAAA;AAGF,eAAW,MAAM,IAAI,6BAAc;AAEnC,WAAO,GAAG,cAAc,MAAM;AAC5B,aAAO,WAAW;AAAA;AAGpB;AAAA;AAEF,QAAM,aAAa,IAAI,0BAAW;AAAA;AAGpC,GAAG,OAAO;",
  "names": []
}
